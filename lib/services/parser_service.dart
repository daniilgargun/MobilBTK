import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html;
import 'package:html/dom.dart';
import '../models/schedule_model.dart';
import 'database_service.dart';
import 'dart:developer' as developer;
import 'package:flutter/foundation.dart';

class ParserService {
  final String url = "https://bartc.by/index.php/obuchayushchemusya/dnevnoe-otdelenie/tekushchee-raspisanie";
  final DatabaseService _db = DatabaseService();
  static bool _isLoading = false;
  static DateTime? _lastLoadTime;

  // –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –∫–æ–ª–ª–µ–¥–∂–∞
  // –ò—Å–ø–æ–ª—å–∑—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É html –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
  // - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  // - —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
  // - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–æ–≤
  // - –æ—à–∏–±–∫—É –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
  Future<(Map<String, Map<String, List<ScheduleItem>>>?, List<String>, List<String>, String?)> parseSchedule() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
    if (_lastLoadTime != null && 
        DateTime.now().difference(_lastLoadTime!) < const Duration(seconds: 5)) {
      developer.log('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ');
      return (null, <String>[], <String>[], null);
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (_isLoading) {
      developer.log('–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return (null, <String>[], <String>[], null);
    }

    _isLoading = true;
    _lastLoadTime = DateTime.now();

    try {
      debugPrint('üîÑ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      final response = await http.get(Uri.parse(url));
      debugPrint('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');

      if (response.statusCode == 200) {
        final document = html.parse(response.body);
        debugPrint('üìÑ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
        
        final tables = document.getElementsByTagName('table');
        
        if (tables.isEmpty) {
          developer.log('–¢–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          return (null, <String>[], <String>[], "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        final scheduleData = <String, Map<String, List<ScheduleItem>>>{};
        final groupSet = <String>{};
        final teacherSet = <String>{};

        for (var table in tables) {
          _parseTable(table, scheduleData, groupSet, teacherSet);
          // –î–∞–µ–º –≤—Ä–µ–º—è –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º
          await Future.delayed(const Duration(milliseconds: 1));
        }

        if (scheduleData.isEmpty) {
          developer.log('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ');
          return (null, <String>[], <String>[], "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ");
        }

        developer.log(
          '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
          error: {
            '–î–Ω–µ–π': scheduleData.length,
            '–ì—Ä—É–ø–ø': groupSet.length,
            '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π': teacherSet.length,
          },
        );

        debugPrint('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        return (scheduleData, groupSet.toList()..sort(), teacherSet.toList()..sort(), null);
      } else {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.statusCode}');
        return (null, <String>[], <String>[], '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${response.statusCode}');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: $e');
      return (null, <String>[], <String>[], '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
    } finally {
      _isLoading = false;
    }
  }

  // –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
  void _parseTable(Element table, Map<String, Map<String, List<ScheduleItem>>> scheduleData, 
                  Set<String> groupSet, Set<String> teacherSet) {
    final rows = table.getElementsByTagName('tr');
    String currentDay = "";
    String currentGroup = "";

    for (var row in rows) {
      final cells = row.getElementsByTagName('td');
      if (cells.isEmpty) continue;

      final dateCell = cells[0].text.trim();
      if (dateCell.isNotEmpty) {
        try {
          currentDay = dateCell.replaceAll(RegExp(r'[\(\)]'), '');
          scheduleData.putIfAbsent(currentDay, () => {});

          final groupCell = row.querySelector('.ari-tbl-col-1');
          if (groupCell != null) {
            currentGroup = groupCell.text.trim();
            groupSet.add(currentGroup);

            final lessonData = _extractLessonData(row);
            if (lessonData != null) {
              final lessonWithGroup = lessonData.copyWith(group: currentGroup);
              scheduleData[currentDay]!.putIfAbsent(currentGroup, () => []);
              scheduleData[currentDay]![currentGroup]!.add(lessonWithGroup);

              if (lessonWithGroup.teacher.isNotEmpty) {
                teacherSet.add(lessonWithGroup.teacher);
              }
            }
          }
        } catch (e) {
          continue;
        }
      }
    }
  }

  // –î–æ—Å—Ç–∞–µ—Ç –∏–Ω—Ñ—É –æ –ø–∞—Ä–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  ScheduleItem? _extractLessonData(Element row) {
    try {
      final number = row.querySelector('.ari-tbl-col-2')?.text.trim() ?? '';
      final discipline = row.querySelector('.ari-tbl-col-3')?.text.trim() ?? '';
      final teacher = row.querySelector('.ari-tbl-col-4')?.text.trim() ?? '';
      final classroom = row.querySelector('.ari-tbl-col-5')?.text.trim() ?? '';
      final subgroup = row.querySelector('.ari-tbl-col-6')?.text.trim() ?? '';

      if (number.isNotEmpty || discipline.isNotEmpty || teacher.isNotEmpty || classroom.isNotEmpty) {
        return ScheduleItem(
          group: '',
          lessonNumber: int.tryParse(number) ?? 0,
          subject: discipline,
          teacher: teacher,
          classroom: classroom,
          subgroup: subgroup.isEmpty ? null : subgroup,
        );
      }
    } catch (e) {
      developer.log("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞:", error: e);
    }
    return null;
  }
} 