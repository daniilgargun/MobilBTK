import 'package:flutter/foundation.dart';
import '../services/parser_service.dart';
import '../services/database_service.dart';
import '../models/schedule_model.dart';
import 'dart:developer' as developer;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart' as intl;
import 'package:flutter/foundation.dart';
import '../services/connectivity_service.dart';
import 'dart:async';

class ScheduleProvider extends ChangeNotifier {
  final ParserService _parser = ParserService();
  final DatabaseService _db = DatabaseService();
  
  Map<String, Map<String, List<ScheduleItem>>>? _currentScheduleData;
  Map<String, Map<String, List<ScheduleItem>>>? _fullScheduleData;
  List<String> _groups = [];
  List<String> _teachers = [];
  String? _error;
  bool _isLoading = false;
  String? _status;
  bool _isLoaded = false;
  int _storageDays = 30;
  String? _errorMessage;
  String? _errorDetails;
  bool _showError = false;
  bool _mounted = true;
  bool _showSuccess = false;
  String? _successMessage;
  bool _isUpdating = false;
  bool _isOffline = false;
  static DateTime? _lastUpdateTime;
  Timer? _connectivityCheckTimer;

  Map<String, Map<String, List<ScheduleItem>>>? get scheduleData => _currentScheduleData;
  Map<String, Map<String, List<ScheduleItem>>>? get fullScheduleData => _fullScheduleData;
  List<String> get groups => _groups;
  List<String> get teachers => _teachers;
  String? get error => _error;
  bool get isLoading => _isLoading;
  String? get status => _status;
  bool get isLoaded => _isLoaded;
  String? get errorMessage => _errorMessage;
  String? get errorDetails => _errorDetails;
  bool get showError => _showError;
  bool get mounted => _mounted;
  bool get showSuccess => _showSuccess;
  String? get successMessage => _successMessage;
  bool get isOffline => _isOffline;

  ScheduleProvider() {
    _connectivityCheckTimer = Timer.periodic(
      const Duration(seconds: 5),
      (_) => _checkConnectivity(),
    );
  }

  void _updateStatus(String? message) {
    _status = message;
    notifyListeners();
  }

  void _handleError(String message, {String? details}) {
    _errorMessage = message;
    _errorDetails = details;
    _showError = true;
    notifyListeners();
  }

  void dismissError() {
    _showError = false;
    _errorMessage = null;
    _errorDetails = null;
    notifyListeners();
  }

  void dismissSuccess() {
    _showSuccess = false;
    _successMessage = null;
    notifyListeners();
  }

  Future<void> loadSchedule() async {
    if (_isLoaded) return;
    
    try {
      _updateStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
      debugPrint('üì• –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      final currentSchedule = await _db.getCurrentSchedule();
      final archiveSchedule = await _db.getArchiveSchedule();
      
      debugPrint('üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${currentSchedule.keys.join(", ")}');
      debugPrint('üìÖ –ê—Ä—Ö–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${archiveSchedule.keys.join(", ")}');
      
      if ((currentSchedule.isNotEmpty || archiveSchedule.isNotEmpty) && _mounted) {
        _currentScheduleData = currentSchedule;
        _fullScheduleData = archiveSchedule;
        notifyListeners();
        
        if (!await ConnectivityService().isOnline()) {
          _updateStatus('–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ');
          _isLoaded = true;
          return;
        }
      }

      if (!await ConnectivityService().isOnline()) {
        if (currentSchedule.isEmpty && archiveSchedule.isEmpty) {
          _handleError(
            '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            details: '–î–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
          );
        }
        return;
      }

      final shouldUpdate = await shouldUpdateSchedule();
      if (shouldUpdate || _currentScheduleData == null || _currentScheduleData!.isEmpty) {
        await updateSchedule(silent: true);
      } else {
        _isLoaded = true;
        _updateStatus(null);
        notifyListeners();
      }
    } catch (e, stackTrace) {
      developer.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error: e, stackTrace: stackTrace);
      _handleError(
        '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        details: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
      );
    }
  }

  Future<void> updateSchedule({bool silent = false}) async {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (_isUpdating) {
      debugPrint('‚è≠Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    _isUpdating = true;
    
    if (!silent) {
      _isLoading = true;
      _updateStatus('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
    }
    
    try {
      debugPrint('üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      final result = await compute(_parseScheduleIsolate, _parser.url);
      
      if (result.$1 != null) {
        debugPrint('üìÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã: ${result.$1!.keys.join(", ")}');
        _currentScheduleData = result.$1;
        
        debugPrint('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        await _db.saveCurrentSchedule(_currentScheduleData!);
        
        debugPrint('üìö –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        await _db.archiveSchedule(_currentScheduleData!);
        
        debugPrint('üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        _fullScheduleData = await _db.getArchiveSchedule();
        debugPrint('üìÖ –î–∞—Ç—ã –≤ –∞—Ä—Ö–∏–≤–µ: ${_fullScheduleData?.keys.join(", ")}');
        
        _groups = result.$2;
        _teachers = result.$3;
        
        await _db.saveGroupsAndTeachers(_groups, _teachers);
        
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('last_schedule_update', DateTime.now().toIso8601String());
        
        await _cleanOldSchedule();
        
        _isLoaded = true;
        _error = null;
        
        if (!silent) {
          _showSuccess = true;
          _successMessage = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ';
        }
      } else if (result.$4 != null) {
        _handleError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', details: result.$4);
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      _handleError(
        '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        details: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
      );
    } finally {
      _isLoading = false;
      _isUpdating = false;
      _updateStatus(null);
      notifyListeners();
    }
  }

  Future<void> updateStorageDays(int days) async {
    _storageDays = days;
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('schedule_storage_days', days);
    await _cleanOldSchedule();
  }

  Future<void> _cleanOldSchedule() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      _storageDays = prefs.getInt('schedule_storage_days') ?? 30;
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞
      await _db.cleanOldArchive(_storageDays);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (_fullScheduleData != null) {
        final now = DateTime.now();
        final cutoffDate = now.subtract(Duration(days: _storageDays));
        
        _fullScheduleData!.removeWhere((dateStr, _) {
          try {
            final date = _parseDateString(dateStr);
            return date.isBefore(cutoffDate);
          } catch (e) {
            return false;
          }
        });
      }
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
      _fullScheduleData = await _db.getArchiveSchedule();
      
      notifyListeners();
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: $e');
    }
  }

  DateTime _parseDateString(String dateStr) {
    debugPrint('üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã: $dateStr');
    final parts = dateStr.split('-');
    if (parts.length != 2) {
      debugPrint('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: $dateStr');
      throw FormatException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: $dateStr');
    }

    final day = int.parse(parts[0]);
    final monthStr = parts[1].toLowerCase().trim();
    
    final monthMap = {
      '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, 
      '–º–∞—Ä—Ç': 3, '–º–∞—Ä': 3, 
      '–∞–ø—Ä': 4, '–º–∞–π': 5, 
      '–∏—é–Ω': 6, '–∏—é–ª': 7, 
      '–∞–≤–≥': 8, '—Å–µ–Ω': 9, 
      '–æ–∫—Ç': 10, '–Ω–æ—è': 11, 
      '–¥–µ–∫': 12,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–∏—Å–ª–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
      '01': 1, '02': 2, '03': 3, '04': 4,
      '05': 5, '06': 6, '07': 7, '08': 8,
      '09': 9, '10': 10, '11': 11, '12': 12,
    };
    
    final month = monthMap[monthStr];
    if (month == null) {
      debugPrint('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: $monthStr');
      throw FormatException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü: $monthStr');
    }
    
    final now = DateTime.now();
    var year = now.year;
    
    if (month < now.month) {
      year++;
    }
    
    debugPrint('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –¥–∞—Ç–∞: $day.$month.$year');
    return DateTime(year, month, day);
  }

  Future<void> loadGroupsAndTeachers() async {
    try {
      developer.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã');
      
      final db = await _db.database;
      final groupsResult = await db.query('groups');
      final teachersResult = await db.query('teachers');

      _groups = groupsResult.map((e) => e['name'] as String).toList();
      _teachers = teachersResult.map((e) => e['name'] as String).toList();
      
      developer.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –±–∞–∑—ã:', error: {
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø': _groups.length,
        '–ì—Ä—É–ø–ø—ã': _groups,
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π': _teachers.length,
      });
      
      notifyListeners();
    } catch (e, stackTrace) {
      developer.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', error: e, stackTrace: stackTrace);
    }
  }

  List<String> _extractGroups(Map<String, Map<String, List<ScheduleItem>>> schedule) {
    final Set<String> uniqueGroups = {};
    
    for (var daySchedule in schedule.values) {
      for (var groupSchedule in daySchedule.values) {
        for (var item in groupSchedule) {
          uniqueGroups.add(item.group);
        }
      }
    }
    
    return uniqueGroups.toList()..sort();
  }

  List<String> _extractTeachers(Map<String, Map<String, List<ScheduleItem>>> schedule) {
    final Set<String> uniqueTeachers = {};
    
    for (var daySchedule in schedule.values) {
      for (var groupSchedule in daySchedule.values) {
        for (var item in groupSchedule) {
          uniqueTeachers.add(item.teacher);
        }
      }
    }
    
    return uniqueTeachers.toList()..sort();
  }

  Future<String> getLastUpdateInfo() async {
    final lastUpdate = await _db.getLastUpdateTime();
    if (lastUpdate == null) {
      return "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å";
    }
    
    final now = DateTime.now();
    final diff = now.difference(lastUpdate);
    
    if (diff.inMinutes < 1) {
      return "–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ";
    } else if (diff.inMinutes < 60) {
      return "–û–±–Ω–æ–≤–ª–µ–Ω–æ ${diff.inMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥";
    } else if (diff.inHours < 24) {
      return "–û–±–Ω–æ–≤–ª–µ–Ω–æ ${diff.inHours} —á. –Ω–∞–∑–∞–¥";
    } else {
      final formatter = intl.DateFormat('dd.MM.yyyy HH:mm', 'ru_RU');
      return "–û–±–Ω–æ–≤–ª–µ–Ω–æ ${formatter.format(lastUpdate)}";
    }
  }

  @override
  void dispose() {
    _mounted = false;
    _connectivityCheckTimer?.cancel();
    super.dispose();
  }

  static Future<(Map<String, Map<String, List<ScheduleItem>>>?, List<String>, List<String>, String?)> 
      _parseScheduleIsolate(String url) async {
    final parser = ParserService();
    return await parser.parseSchedule();
  }

  Future<bool> shouldUpdateSchedule() async {
    try {
      final now = DateTime.now();
      
      if (now.weekday == DateTime.sunday) {
        return false;
      }
      
      if (now.hour < 7 || now.hour >= 20) {
        return false;
      }
      
      final lastUpdate = await getLastUpdateTime();
      
      if (lastUpdate == null) {
        return true;
      }
      
      if (lastUpdate.day != now.day || 
          lastUpdate.month != now.month || 
          lastUpdate.year != now.year) {
        return true;
      }
      
      final hoursSinceLastUpdate = now.difference(lastUpdate).inHours;
      if (hoursSinceLastUpdate >= 3) {
        return true;
      }
      
      return false;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      return false;
    }
  }

  Future<DateTime?> getLastUpdateTime() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final lastUpdateStr = prefs.getString('last_schedule_update');
      if (lastUpdateStr != null) {
        return DateTime.parse(lastUpdateStr);
      }
      return null;
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e');
      return null;
    }
  }

  Future<void> _checkConnectivity() async {
    final connectivityService = ConnectivityService();
    final isOnline = await connectivityService.isOnline();
    
    if (isOnline != !_isOffline) {
      _isOffline = !isOnline;
      notifyListeners();
      
      if (!_isOffline) {
        await updateSchedule(silent: true);
      }
    }
  }

  Map<String, Map<String, List<ScheduleItem>>>? getScheduleForCalendar() {
    return _fullScheduleData;
  }
}