import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/schedule_provider.dart';
import '../models/schedule_model.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../widgets/schedule_item_card.dart';
import '../widgets/bell_schedule_dialog.dart';
import '../widgets/error_snackbar.dart';
import 'package:share_plus/share_plus.dart';
import '../services/connectivity_service.dart';
class ScheduleScreen extends StatefulWidget {
  const ScheduleScreen({super.key});

  @override
  State<ScheduleScreen> createState() => _ScheduleScreenState();
}

class _ScheduleScreenState extends State<ScheduleScreen> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  final PageController _pageController = PageController(initialPage: 0);
  int _currentPage = 0;
  static const String _searchQueryKey = 'last_search_query';
  static const EdgeInsets _listPadding = EdgeInsets.all(8);
  static const Duration _animationDuration = Duration(milliseconds: 300);
  bool _hasShownOfflineWarning = false;

  @override
  void initState() {
    super.initState();
    _loadLastSearchQuery();
    // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadData();
    });
  }

  Future<void> _loadLastSearchQuery() async {
    final prefs = await SharedPreferences.getInstance();
    final lastQuery = prefs.getString(_searchQueryKey) ?? '';
    setState(() {
      _searchQuery = lastQuery;
      _searchController.text = lastQuery;
    });
  }

  Future<void> _saveSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_searchQueryKey, query);
  }

  String formatScheduleDate(String dateStr) {
    try {
      // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–∞ "21-—Ñ–µ–≤"
      final parts = dateStr.split('-');
      if (parts.length != 2) return dateStr;

      final day = int.parse(parts[0]);
      final monthMap = {
        '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4,
        '–º–∞–π': 5, '–∏—é–Ω': 6, '–∏—é–ª': 7, '–∞–≤–≥': 8,
        '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
      };
      final month = monthMap[parts[1].toLowerCase()];
      if (month == null) return dateStr;

      final date = DateTime(DateTime.now().year, month, day);
      final weekDay = DateFormat('EEEE', 'ru_RU').format(date);
      
      return '${parts[0]} ${parts[1]}($weekDay)';
    } catch (e) {
      return dateStr;
    }
  }

  // –û–±–Ω–æ–≤–∏–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
  Widget _buildSearchField() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: TextField(
        controller: _searchController,
        onChanged: (value) {
          setState(() {
            _searchQuery = value;
            _saveSearchQuery(value);
          });
        },
        decoration: InputDecoration(
          labelText: '–ü–æ–∏—Å–∫',
          border: const OutlineInputBorder(),
          prefixIcon: const Icon(Icons.search_outlined), // –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø–æ–∏—Å–∫–∞
          suffixIcon: _searchQuery.isNotEmpty
              ? IconButton(
                  icon: const Icon(Icons.clear),
                  onPressed: () {
                    setState(() {
                      _searchController.clear();
                      _searchQuery = '';
                      _saveSearchQuery('');
                    });
                  },
                )
              : null,
        ),
      ),
    );
  }

  // –û–±–Ω–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
  Widget _buildDateHeader(String date) {
    return Padding(
      padding: const EdgeInsets.only(left: 16.0, right: 16.0, bottom: 8.0),
      child: AnimatedSwitcher(
        duration: const Duration(milliseconds: 300),
        transitionBuilder: (Widget child, Animation<double> animation) {
          return FadeTransition(
            opacity: animation,
            child: SlideTransition(
              position: Tween<Offset>(
                begin: const Offset(0.0, 0.2),
                end: Offset.zero,
              ).animate(animation),
              child: child,
            ),
          );
        },
        child: Text(
          formatScheduleDate(date),
          key: ValueKey<String>(date), // –í–∞–∂–Ω–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
          style: Theme.of(context).textTheme.headlineSmall?.copyWith(
            fontWeight: FontWeight.bold,
          ),
          textAlign: TextAlign.left,
        ),
      ),
    );
  }

  // –û–±–Ω–æ–≤–∏–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ—á–∫–∞–º–∏
  Widget _buildPageDots(List<String> dates) {
    return Positioned(
      bottom: 16,
      left: 0,
      right: 0,
      child: Center(
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          decoration: BoxDecoration(
            color: Theme.of(context).colorScheme.surface.withOpacity(0.8),
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 4,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min, // –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            mainAxisAlignment: MainAxisAlignment.center,
            children: List.generate(dates.length, (index) {
              return AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                margin: const EdgeInsets.symmetric(horizontal: 4),
                width: 10,
                height: 10,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: _currentPage == index
                      ? Theme.of(context).colorScheme.primary
                      : Theme.of(context).colorScheme.surfaceVariant,
                ),
              );
            }),
          ),
        ),
      ),
    );
  }

  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  String _formatScheduleForSharing(List<ScheduleItem> lessons, String date) {
    final buffer = StringBuffer();
    
    if (lessons.isNotEmpty) {
      final group = lessons.first.group;
      buffer.writeln('üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã $group\n');
    }
    
    buffer.writeln('üìÖ ${formatScheduleDate(date)}');
    buffer.writeln('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    for (var lesson in lessons) {
      buffer.writeln('üïê ${lesson.lessonNumber} –ø–∞—Ä–∞');
      buffer.writeln('üìö ${lesson.subject}');
      buffer.writeln('üë®‚Äçüè´ ${lesson.teacher}');
      buffer.writeln('üè¢ –ö–∞–±–∏–Ω–µ—Ç: ${lesson.classroom}');
      if (lesson.subgroup != null && lesson.subgroup != "0") {
        buffer.writeln('üë• –ü–æ–¥–≥—Ä—É–ø–ø–∞: ${lesson.subgroup}');
      }
      buffer.writeln('');
    }

    buffer.writeln('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–¢–ö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ');
    return buffer.toString();
  }

  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–π –¥–∞—Ç—ã –≤ DateTime
  DateTime _parseDate(String dateStr) {
    final parts = dateStr.split('-');
    if (parts.length != 2) return DateTime.now();

    final day = int.parse(parts[0]);
    final monthMap = {
      '—è–Ω–≤': 1, '—Ñ–µ–≤': 2, '–º–∞—Ä': 3, '–∞–ø—Ä': 4,
      '–º–∞–π': 5, '–∏—é–Ω': 6, '–∏—é–ª': 7, '–∞–≤–≥': 8,
      '—Å–µ–Ω': 9, '–æ–∫—Ç': 10, '–Ω–æ—è': 11, '–¥–µ–∫': 12
    };
    final month = monthMap[parts[1].toLowerCase()] ?? 1;
    
    return DateTime(DateTime.now().year, month, day);
  }

  @override
  Widget build(BuildContext context) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
    final isDarkMode = Theme.of(context).brightness == Brightness.dark;
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    final buttonColor = isDarkMode 
        ? const Color(0xFF194874).withOpacity(0.8)
        : Colors.white;
    
    // –¶–≤–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    final activeIndicatorColor = isDarkMode 
        ? Colors.white 
        : const Color(0xFF194874);
    final inactiveIndicatorColor = isDarkMode 
        ? Colors.white.withOpacity(0.3)
        : const Color(0xFF194874).withOpacity(0.3);

    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.surface,
      appBar: AppBar(
        title: const Text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
        actions: [
          IconButton(
            icon: const Icon(Icons.access_time),
            onPressed: _showBellSchedule,
            tooltip: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤',
          ),
        ],
      ),
      body: Consumer<ScheduleProvider>(
        builder: (context, provider, child) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
          if (provider.isOffline) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              ConnectivityService().showOfflineWarning(context);
            });
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
          if (provider.errorMessage != null) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              CustomSnackBar.showError(
                context,
                provider.errorMessage!,
              );
              provider.dismissError();
            });
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (provider.successMessage != null) {
            WidgetsBinding.instance.addPostFrameCallback((_) {
              CustomSnackBar.showSuccess(
                context,
                provider.successMessage!,
              );
              provider.dismissSuccess();
            });
          }

          return Stack(
            children: [
              // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
              if (provider.isLoading) (
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const CircularProgressIndicator(),
                      const SizedBox(height: 16),
                      if (provider.status != null)
                        Text(provider.status!),
                    ],
                  ),
                )
              ) else if (provider.scheduleData == null || provider.scheduleData!.isEmpty) (
                Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                      if (!provider.isOffline)
                        ElevatedButton(
                          onPressed: () => provider.loadSchedule(),
                          child: const Text('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É'),
                        ),
                      if (provider.isOffline)
                        Text(
                          '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Theme.of(context).colorScheme.error,
                          ),
                          textAlign: TextAlign.center,
                        ),
                    ],
                  ),
                )
              ) else (
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildSearchField(),
                    AnimatedSwitcher(
                      duration: const Duration(milliseconds: 300),
                      child: _buildDateHeader(provider.scheduleData!.keys.toList()[_currentPage]),
                    ),
                    Expanded(
                      child: Stack(
                        children: [
                          PageView.builder(
                            controller: _pageController,
                            onPageChanged: (index) {
                              setState(() {
                                _currentPage = index;
                              });
                            },
                            itemCount: provider.scheduleData!.length,
                            itemBuilder: (context, index) {
                              final date = provider.scheduleData!.keys.toList()[index];
                              final daySchedule = provider.scheduleData![date]!;
                              final allLessons = <ScheduleItem>[];
                              
                              // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∑–∞ –¥–µ–Ω—å
                              for (var groupLessons in daySchedule.values) {
                                allLessons.addAll(groupLessons.toList());
                              }

                              // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫—É
                              final filteredLessons = _searchQuery.isEmpty
                                  ? allLessons
                                  : allLessons.where((lesson) {
                                      final query = _searchQuery.toLowerCase();
                                      return lesson.group.toLowerCase().contains(query) ||
                                             lesson.teacher.toLowerCase().contains(query) ||
                                             lesson.classroom.toLowerCase().contains(query) ||
                                             lesson.subject.toLowerCase().contains(query);
                                    }).toList();

                              // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
                              filteredLessons.sort((a, b) => a.lessonNumber.compareTo(b.lessonNumber));

                              return Stack(
                                children: [
                                  AnimatedSwitcher(
                                    duration: const Duration(milliseconds: 300),
                                    transitionBuilder: (Widget child, Animation<double> animation) {
                                      return FadeTransition(
                                        opacity: animation,
                                        child: SlideTransition(
                                          position: Tween<Offset>(
                                            begin: Offset(_currentPage > index ? -1.0 : 1.0, 0.0),
                                            end: Offset.zero,
                                          ).animate(CurvedAnimation(
                                            parent: animation,
                                            curve: Curves.easeInOut,
                                          )),
                                          child: child,
                                        ),
                                      );
                                    },
                                    child: ListView.builder(
                                      key: PageStorageKey('schedule_list_$date'),
                                      itemCount: filteredLessons.length,
                                      padding: _listPadding,
                                      cacheExtent: 500,
                                      itemBuilder: (context, index) {
                                        if (!mounted) return const SizedBox();
                                        
                                        return ScheduleItemCard(
                                          key: ValueKey('${filteredLessons[index].hashCode}_$index'),
                                          item: filteredLessons[index],
                                          index: index,
                                          date: _parseDate(date),
                                        );
                                      },
                                    ),
                                  ),
                                ],
                              );
                            },
                          ),
                          
                          // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                          if (provider.scheduleData != null && provider.scheduleData!.isNotEmpty)
                            Positioned(
                              bottom: 20,
                              left: 0,
                              right: 0,
                              child: Center(
                                child: Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                                  decoration: BoxDecoration(
                                    color: isDarkMode 
                                      ? Colors.black.withOpacity(0.6)
                                      : Colors.white.withOpacity(0.6),
                                    borderRadius: BorderRadius.circular(30),
                                  ),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: List.generate(
                                      provider.scheduleData!.keys.length > 10 
                                          ? 10
                                          : provider.scheduleData!.keys.length,
                                      (index) {
                                        // –ï—Å–ª–∏ –¥–Ω–µ–π –±–æ–ª—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É
                                        if (provider.scheduleData!.keys.length > 10) {
                                          // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ç–æ—á–µ–∫
                                          int start = _currentPage - 4;
                                          if (start < 0) start = 0;
                                          if (start > provider.scheduleData!.keys.length - 10) 
                                            start = provider.scheduleData!.keys.length - 10;
                                          
                                          // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
                                          if (index + start >= provider.scheduleData!.keys.length) 
                                            return const SizedBox.shrink();
                                          
                                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                                          bool isCurrentPage = (index + start) == _currentPage;
                                          
                                          return AnimatedContainer(
                                            duration: const Duration(milliseconds: 300),
                                            margin: const EdgeInsets.symmetric(horizontal: 4),
                                            height: 12,
                                            width: 12,
                                            decoration: BoxDecoration(
                                              color: isCurrentPage 
                                                ? const Color(0xFF2195F1) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏
                                                : isDarkMode
                                                  ? const Color(0xFF12293F).withOpacity(0.5) // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
                                                  : const Color(0xFFE3E3E3), // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
                                              shape: BoxShape.circle,
                                            ),
                                          );
                                        } else {
                                          // –ï—Å–ª–∏ –¥–Ω–µ–π –º–µ–Ω—å—à–µ 10, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
                                          return AnimatedContainer(
                                            duration: const Duration(milliseconds: 300),
                                            margin: const EdgeInsets.symmetric(horizontal: 4),
                                            height: 12,
                                            width: 12,
                                            decoration: BoxDecoration(
                                              color: _currentPage == index 
                                                ? const Color(0xFF2195F1) // –°–∏–Ω–∏–π —Ü–≤–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏
                                                : isDarkMode
                                                  ? const Color(0xFF194874).withOpacity(0.5) // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
                                                  : const Color(0xFFE3E3E3), // –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
                                              shape: BoxShape.circle,
                                            ),
                                          );
                                        }
                                      },
                                    ),
                                  ),
                                ),
                              ),
                            ),
                        ],
                      ),
                    ),
                  ],
                )
              ),
            ],
          );
        },
      ),
      floatingActionButton: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
          if (_searchQuery.isNotEmpty)
            Padding(
              padding: const EdgeInsets.only(bottom: 8.0),
              child: FloatingActionButton(
                heroTag: "shareBtn",
                onPressed: _shareSchedule,
                backgroundColor: Theme.of(context).brightness == Brightness.dark
                    ? const Color(0xFF194874).withOpacity(0.8)
                    : const Color(0xFFFFFFFF).withOpacity(0.6), // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
                elevation: 2,
                child: Icon(
                  Icons.share,
                  color: Theme.of(context).brightness == Brightness.dark
                      ? Colors.white
                      : const Color(0xFF194874),
                ),
              ),
            ),
          
          // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          Consumer<ScheduleProvider>(
            builder: (context, provider, child) {
              return FloatingActionButton(
                heroTag: "refreshBtn",
                onPressed: provider.isOffline ? null : () => provider.updateSchedule(),
                backgroundColor: provider.isOffline 
                    ? Colors.grey 
                    : (Theme.of(context).brightness == Brightness.dark
                        ? const Color(0xFF194874).withOpacity(0.8)
                        : const Color(0xFFFFFFFF).withOpacity(0.6)), // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –≤ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ
                elevation: 2,
                child: Icon(
                  Icons.refresh,
                  color: Theme.of(context).brightness == Brightness.dark
                      ? Colors.white
                      : const Color(0xFF194874),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    _pageController.dispose();
    _hasShownOfflineWarning = false;
    super.dispose();
  }

  // –í –∫–ª–∞—Å—Å–µ ScheduleScreen –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
  void _showBellSchedule() {
    showDialog(
      context: context,
      builder: (context) => const BellScheduleDialog(),
    );
  }

  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
  void _shareSchedule() async {
    if (context.read<ScheduleProvider>().scheduleData != null) {
      final provider = context.read<ScheduleProvider>();
      final dates = provider.scheduleData!.keys.toList()..sort();
      final date = dates[_currentPage];
      final daySchedule = provider.scheduleData![date]!;
      final allLessons = <ScheduleItem>[];
      
      for (var groupLessons in daySchedule.values) {
        allLessons.addAll(groupLessons.toList());
      }

      final filteredLessons = allLessons.where((lesson) {
        final query = _searchQuery.toLowerCase();
        return lesson.group.toLowerCase().contains(query) ||
               lesson.teacher.toLowerCase().contains(query) ||
               lesson.classroom.toLowerCase().contains(query) ||
               lesson.subject.toLowerCase().contains(query);
      }).toList();

      if (filteredLessons.isNotEmpty) {
        final textToShare = _formatScheduleForSharing(filteredLessons, date);
        await Share.share(textToShare);
      }
    }
  }

  Future<void> _loadData() async {
    final provider = context.read<ScheduleProvider>();
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    await provider.loadSchedule();
    await provider.loadGroupsAndTeachers();
  }
} 